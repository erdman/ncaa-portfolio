# this one-liner downloads a complete season of game data and concatenates into single file
# this was created in experimentation to figure out how to work with the API
# use fetch-ncaa-data script for fetching updated weekly scores

wget http://data.ncaa.com/sites/default/files/data/scoreboard/football/fbs/2017/{{01..15},P}/scoreboard.json -O - | grep gameinfo.json | tr -d '"' | wget --base https://data.ncaa.com -i - -O - | jq -s '.' > output.json

# which does the following:
# greps "gameinfo.json" from scoreboard.json, thereby isolating the gameinfo.json files 
# removes the " from the json string
# wget's the respective relative file paths from the given base, taking the relative file paths over stdin and sending all files over stdout
# jq "slurps" all the json objects together into an array and saves to output.json


# used the following to convert the csv from google sheets into a simple json array.  for some reason, the csv included special characters which are deleted with tr.  jq had to be run twice to put them all in single array, probably another way to do it, dunno.
cat fbs-2017.csv | tr -d '\r' | jq -R '.' | jq -s '.' | less

# UPDATE: now using enlarged csv data file for input, had to break outbig guns to translate to json
csv2json -d fbs-2017.csv fbs-2017.json
csv2json -d portfolios-2016.csv portfolios-2016.json
# just use first 3 columns of input file
cut -f -3 -d ',' fbs-2018.csv | csv2json -d - fbs-2018.json

# 2018-09-17
# data.ncaa.com in the link above has gotten lax about the completeness of data; some games are missing, especially games that have been rescheduled to an earlier date.
# the following captures a better dataset, but still at least one game missing (Coastal Caro. vs Campbell)
# wget https://data.ncaa.com/casablanca/scoreboard/football/fbs/2018/03/scoreboard.json
# cat scoreboard.json | jq '[.games[].game] | map({url, gameState, startDate, home:{teamRank: .home.rank, currentScore: .home.score, nameRaw: .home.names.short, description: .home.description}, away:{teamRank: .away.rank, currentScore: .away.score, nameRaw: .away.names.short, description: .away.description}, id:.gameID})'  > 201803.json
# problem (in addition to single missing game) is that the names.short do not map well to the nameRaw's used elsewhere
# saving this jq one-liner processing for converting a completely different format to the format expected by ncaaportfolio
# could be useful for similarly translating espn data
#
# ESPN's API looks like this, but limits download length when using wget versus browser??
# http://site.api.espn.com/apis/site/v2/sports/football/college-football/scoreboard?lang=en&region=us&calendartype=blacklist&limit=300&dates=2018&seasontype=2&week=3&groups=80
# after viewing the request in browser Network console, "copy as cURL" then paste to terminal

# run the sed utility like this
sed -f translate_ncaa_to_espn.sed 2016/fbs-2016.json | less
sed -f translate_ncaa_to_espn.sed 2018/portfolios-2018.json | less
# or to run on the files in-place add the -i flag
sed -i -f translate_ncaa_to_espn.sed 2018/portfolios-2018.json
# and on multiple files at a time in place file-by-file
sed -i -s -f translate-ncaa-to-espn.sed test*.json

# in future, if ESPN changes the spelling of a single school, you can change it with a oneliner, even if not noticed until season underway:
sed -s -i s/"UT San Antonio"/"UTSA"/g portfolios-2018.json fbs-2018.json
sed -s -i s/"Louisiana Monroe"/"UL Monroe"/g portfolios-2018.json fbs-2018.json

sed -s -i s/"UMass"/"Massachusetts"/g 2023/portfolios-2023.json 2023/fbs-2023.json

### 2019 updates
cut -f -3 -d ',' fbs-2019.csv | csvjson | jq '.' > 2019/fbs-2019.json
# need blanks flag here to keep "no team" as "" instead of Null, which breaks the site
csvjson --blanks portfolios-2019.csv | jq '.' > 2019/portfolios-2019.json

### 2020 updates
# to pull unique list of school names from downloaded ESPN schedules
jq -r '.[].home.nameRaw' 2020??.json | sort | uniq
